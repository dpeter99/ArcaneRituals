buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'kotlin'


version = '1.0'
group = 'com.dpeter99.arcanerituals' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'arcanerituals'

java.toolchain.languageVersion = JavaLanguageVersion.of(16) // Mojang ships MS Java 16 to end users, so your mod should target MS Java 16. ðŸ˜‹

sourceSets {
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/'
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '16'
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    //mappings channel: 'official', version: '1.16.5'
	mappings channel: 'official', version: '1.17.1'
	
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan. "REGISTRIES": For firing of registry events. "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                arcanerituals {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                arcanerituals {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'arcanerituals', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            //ideaModule "${project.name}.data"

            mods {
                arcanerituals {
                    sources sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name "curios"
        url "https://maven.theillusivec4.top/"
    }
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven { url 'https://modmaven.dev/' }
}

dependencies {
    //minecraft 'net.minecraftforge:forge:1.16.5-36.1.32'
	minecraft 'net.minecraftforge:forge:1.17.1-37.0.12'

    //compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    //runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}")

    //implementation 'thedarkcolour:kotlinforforge:1.7.0'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.10"

    //For testing the tanks and the fluids
    //runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "arcanerituals",
            "Specification-Vendor": "arcaneritualssareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"arcaneritualssareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
